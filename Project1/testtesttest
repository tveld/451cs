#> InputSetLoader: gvFormat.InputSetLoaderSimpleGVFormat

###########################################################################
#
# *Partially* test a 16-bit ALU.  (The student is responsible for
# designing a more comprehensive test.)  Note: This tests the ALU
# only.  It does not thoroughly test the underlying adder/subtracter
# and multiplier.
#
# Author: Zachary Kurmas
# (C) 2007 Grand Valley State University
#
##########################################################################

BEGIN add
  INPUTS
    InputA SIGNED(16) [1, -3]
    InputB SIGNED(16) [1, 2^15-1]
    Op 0
  OUTPUTS
    Output SIGNED(16) [2, -2^15, -2, 2^15-4]
    Overflow [0, 1, 0, 0]

BEGIN add1
  INPUTS
    InputA SIGNED(16) [48, 3002]
    InputB SIGNED(16) [2442, 1102]
    Op 0
  OUTPUTS
    Output SIGNED(16) [2490, 1150, 5444, 4104]
    Overflow 0

BEGIN add_overflow
  INPUTS
    InputA SIGNED(16) [1]
    InputB SIGNED(16) [32767]
  OUTPUTS
    Output SIGNED(16) [-32768]
    Overflow [1]

BEGIN subtract
  INPUTS
    InputA SIGNED(16) [1, -3]
    InputB SIGNED(16) [-1, 2^15-1]
    Op 4
  OUTPUTS
    Output SIGNED(16) [2, -2^15+2, -2, 2^15-2]
    Overflow [0, 0, 0, 1]

BEGIN subtract1
  INPUTS
    InputA SIGNED(16) [16, 68, 105]
    InputB SIGNED(16) [14, 33, 7757]
    Op 4
  OUTPUTS
    Output SIGNED(16) [2, -17, -7741, 54, 35, -7689, 91, 72, -7652]
    Overflow 0

BEGIN sub_overflow
  INPUTS
    InputA SIGNED(16) [1]
    InputB SIGNED(16) [2]
    Op 4
  OUTPUTS
    Output SIGNED(16) [-1]
    Overflow [0]

BEGIN multiply
 INPUTS
    InputA SIGNED(16) [1000, 24, -590]
    InputB SIGNED(16) [5, 16, -30]
    Op 1
 OUTPUTS
    Output SIGNED(16) [5000, 16000, -30000, 120, 384, -720, 2950, 9440, 17700]
    Overflow 0

BEGIN mult_overflow2
 INPUTS 
    InputA SIGNED(16) 1237 
    InputB SIGNED(16) [1251, -1257]
    Op 1
  OUTPUTS
    Output [0x9cdf, 0x4623]
    High [0x0017, 0xffe8] 
    Overflow [1, 1]

BEGIN mult_edgecases
 INPUTS
    InputA SIGNED(16) -32768
    InputB SIGNED(16) [1, 0]
    Op 1
 OUTPUTS
    Output SIGNED(16) [-32768, 0]
    Overflow [0, 0]

#
# WARNING:  Be sure to test pairs of values that 
# (1) Will make the subtractor overflow
# (2) Will give different answers for less than and less than unsigned
#
# Hint:  If intentionally switching your op codes doesn't cause a failure, then
# your tests aren't good enough.

BEGIN less_than_signed
  INPUTS
    InputA SIGNED(16) [5, 2000, 46]
    InputB SIGNED(16) [-1, 4, 6, 240]
    Op 6
  OUTPUTS
    Output [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1]
    Overflow 0

BEGIN less_than_signed_edge
 INPUTS
    InputA SIGNED(16) 3
    InputB SIGNED(16) -32768
    Op 6
 OUTPUTS
    Output 0
    Overflow 0

BEGIN less_than_signed_zero
  INPUTS
    InputA SIGNED(16) [0, -5]
    InputB SIGNED(16) [0, -5]
    Op 6
  OUTPUTS
    Output [0, 0, 1, 0]
    Overflow 0

BEGIN less_than_unsigned
  INPUTS
    InputA [5, 2000, 46]
    InputB [1, 4, 6, 240]
    Op 7
  OUTPUTS
    Output [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1]
    Overflow 0


# last line
